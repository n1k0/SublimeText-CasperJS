/**
 *  CasperJS 1.1 Beta 3 completions for Sublime Text
 */
{
    "scope": "source.js",
    "tab_completion": false,
    "completions":
    [
        /* casper module API */
        {"trigger": "back", "contents": "back()"},
        {"trigger": "base64encode", "contents": "base64encode('${1:url}')"},
        {"trigger": "bypass", "contents": "bypass(${1:Numbr})"},
        {"trigger": "capture", "contents": "capture('${1}')"},
        {"trigger": "captureClip", "contents": "capture('${1}', {\n\ttop: ${2:100},\n\tleft: ${3:100},\n\twidth: ${4:500},\n\theight: ${5:400}\n})"},
        {"trigger": "captureWithOptions", "contents": "capture('${1}', ${2:undefined},{\n\tformat: '${3:jpg}',\n\tquality: ${4:75}\n})"},
        {"trigger": "captureBase64", "contents": "captureBase64('${1:format}', ${2:area})"},
        {"trigger": "captureSelector", "contents": "captureSelector('${1:filename}', '${2:.selector}')"},
        {"trigger": "captureSelectorWithOptions", "contents": "captureSelector('${1:filename}', '${2:.selector}',{\n\tformat: '${3:jpg}',\n\tquality: ${4:75}\n})"},
        {"trigger": "die", "contents": "die('${1:message}')"},
        {"trigger": "download", "contents": "download('http://${1:url}')"},
        {"trigger": "debugPage", "contents": "debugPage()"},
        {"trigger": "debugHTML", "contents": "debugHTML(${1})"},
        {"trigger": "die", "contents": "die('${1:message}')"},
        {"trigger": "each", "contents": "each(${1:[]}, function(self, item, index) {\n\t${2}\n})"},
        {"trigger": "eachThen", "contents": "eachThen(${1:[]}, function(response) {\n\t${2}\n})"},
        {"trigger": "echo", "contents": "echo('${1:}')"},
        {"trigger": "evaluate", "contents": "evaluate(function() {\n\t${1}\n})"},
        {"trigger": "evaluateOrDie", "contents": "evaluateOrDie(function() {\n\treturn ${1:true};\n}, '${2:message}')"},
        {"trigger": "exit", "contents": "exit(${1:0})"},
        {"trigger": "fetchText", "contents": "fetchText('${1:text}')"},
        {"trigger": "fill", "contents": "fill('${1:.selector}', {\n\t'${2:name}': '${3:value}'\n}, ${4:false})"},
        {"trigger": "fillSelectors", "contents": "fillSelectors('${1:.selector}', {\n\t'${2:selector}': '${3:value}'\n}, ${4:false})"},
        {"trigger": "fillXPath", "contents": "fillXPath('${1:.selector}', {\n\t'${2:xpath}': '${3:value}'\n}, ${4:false})"},
        {"trigger": "forward", "contents": "forward()"},
        {"trigger": "getColorizer", "contents": "getColorizer()"},
        {"trigger": "getCurrentUrl", "contents": "getCurrentUrl()"},
        {"trigger": "getElementAttribute", "contents": "getElementAttribute('${1:.selector}', '${2:attribute}')"},
        {"trigger": "getElementsAttribute", "contents": "getElementsAttribute('${1:.selector}', '${2:attribute}')"},
        {"trigger": "getElementBounds", "contents": "getElementBounds('${1:.selector}')"},
        {"trigger": "getElementsBounds", "contents": "getElementsBounds('${1:.selector}')"},
        {"trigger": "getElementInfo", "contents": "getElementInfo('${1:.selector}')"},
        {"trigger": "getElementsInfo", "contents": "getElementsInfo('${1:.selector}')"},
        {"trigger": "getFormValues", "contents": "getFormValues('${1:.selector}')"},
        {"trigger": "getGlobal", "contents": "getGlobal('${1:name}')"},
        {"trigger": "getHTML", "contents": "getHTML('${1:.selector}')"},
        {"trigger": "getPageContent", "contents": "getPageContent()"},
        {"trigger": "getTitle", "contents": "getTitle()"},
        {"trigger": "log", "contents": "log('${1:message}')"},
        {"trigger": "mouseEvent", "contents": "mouseEvent('${1:click}', '${2:.selector}')"},
        {"trigger": "resourceExists", "contents": "resourceExists('${1:}')"},
        {"trigger": "run", "contents": "run(function() {\n\t${1}\n})"},
        {"trigger": "scrollto", "contents": "scrollTo(${1:xValue}, ${2:yValue})"},
        {"trigger": "scrolltobottom", "contents": "scrollToBottom()"},
        {"trigger": "setHttpAuth", "contents": "setHttpAuth('${1:username}', '${2:password}')"},
        {"trigger": "start", "contents": "start('http://${1}', function() {\n\t${2}\n})"},
        {"trigger": "then", "contents": "then(function() {\n\t${1}\n})"},
        {"trigger": "thenBypass", "contents": "thenBypass(${1:Numbr})"},
        {"trigger": "thenBypassIf", "contents": "thenBypassIf(function(){\n\t${1}\n}, ${2:Numbr})"},
        {"trigger": "thenBypassUnless", "contents": "thenBypassUnless(function(){\n\t${1}\n}, ${2:Numbr})"},
        {"trigger": "thenEvaluate", "contents": "thenEvaluate(function() {\n\t${1}\n})"},
        {"trigger": "unwait", "contents": "unwait()"},
        {"trigger": "userAgent", "contents": "userAgent('${1}')"},
        {"trigger": "viewport", "contents": "viewport(${1:800}, ${2:600})"},
        {"trigger": "viewportThen", "contents": "viewport(${1:800}, ${2:600}, function() {\n\t${3}\n})"},
        {"trigger": "warn", "contents": "warn('${1:warning message}')"},
        {"trigger": "wait", "contents": "wait(${1:1000}, function() {\n\t${2}\n})"},
        {"trigger": "waitFor", "contents": "waitFor(function() {\n\treturn ${1:true};\n}, function() {\n\t${2}\n})"},
        {"trigger": "waitForPopup", "contents": "waitForPopup('${1:urlPattern}', function() {\n\t${2}\n})"},
        {"trigger": "waitForResource", "contents": "waitForResource('${1:test}', function() {\n\t${2}\n})"},
        {"trigger": "waitForUrl", "contents": "waitForUrl('${1:url}', function() {\n\t${2}\n})"},
        {"trigger": "withFrame", "contents": "withFrame('${1:frame}', function() {\n\t${2}\n})"},
        {"trigger": "withPopup", "contents": "withPopup('${1:popup}', function() {\n\t${2}\n})"},
        {"trigger": "zoom", "contents": "zoom(${1:factor})"},

        /* events */
        {"trigger": "emit", "contents": "emit('${1:event}')"},
        {"trigger": "on", "contents": "on('${1:event}', function(${2:args}) {\n\t${3:}\n})"},
        {"trigger": "once", "contents": "once('${1:event}', function(${2:args}) {\n\t${3:}\n})"},
        {"trigger": "removeAllListeners", "contents": "removeAllListeners('${1:event}')"},
        {"trigger": "removeListener", "contents": "removeListener('${1:event}', ${2:listener})"},

        /* mouse module API */
        {"trigger": "mclick", "contents": "mouse.click(${1})"},
        {"trigger": "mdoubleclick", "contents": "mouse.doubleclick(${1})"},
        {"trigger": "mdown", "contents": "mouse.down(${1})"},
        {"trigger": "mmove", "contents": "mouse.move(${1})"},
        {"trigger": "mup", "contents": "mouse.up(${1})"},

        /* tester module API */
        {"trigger": "test.assert", "contents": "test.assert(${1:subject}, '${2:message}')"},
        {"trigger": "test.assertEquals", "contents": "test.assertEquals(${1:subject}, ${2:expected}, '${3:message}')"},
        {"trigger": "test.assertNotEquals", "contents": "test.assertNotEquals(${1:subject}, ${2:shouldnt}, '${3:message}')"},
        {"trigger": "test.assertEval", "contents": "test.assertEval(function() {\n\treturn ${1:true};\n}, '${2:message}')"},
        {"trigger": "test.assertEvalEquals", "contents": "test.assertEvalEquals(function() {\n\treturn ${1:'expected'};\n}, ${2:'expected'}, '${3:message}')"},
        {"trigger": "test.assertField", "contents": "test.assertField(${1:inputName}, ${2:expected}, '${3:message}')"},
        {"trigger": "test.assertFieldName", "contents": "test.assertFieldName(${1:fieldName}, ${2:expected}, '${3:message}')"},
        {"trigger": "test.assertFieldCSS", "contents": "test.assertFieldCSS(${1:.selector}, ${2:expected}, '${3:message}')"},
        {"trigger": "test.assertFieldXPath", "contents": "test.assertFieldXPath(${1:xpathSelector}, ${2:expected}, '${3:message}')"},
        {"trigger": "test.assertExists", "contents": "test.assertExists('${1:.selector}', '${2:message}')"},
        {"trigger": "test.assertDoesntExist", "contents": "test.assertDoesntExist('${1:.selector}', '${2:message}')"},
        {"trigger": "test.assertHttpStatus", "contents": "test.assertHttpStatus(${1:status}, '${2:message}')"},
        {"trigger": "test.assertInstanceOf", "contents": "test.assertInstanceOf('${1:input}', '${2:constructor}', '${3:message}')"},
        {"trigger": "test.assertMatch", "contents": "test.assertMatch(${1:subject}, /${2:pattern}/, '${3:message}')"},
        {"trigger": "test.assertNot", "contents": "test.assertNot(${1:condition}, '${2:message}')"},
        {"trigger": "test.assertNotVisible", "contents": "test.assertNotVisible('${1:.selector}', '${2:message}')"},
        {"trigger": "test.assertRaises", "contents": "test.assertRaises(${1:fn}, '${2:[args]}', '${3:message}')"},
        {"trigger": "test.assertResourceExists", "contents": "test.assertResourceExists(${1:test}, '${2:message}')"},
        {"trigger": "test.assertTextDoesntExist", "contents": "test.assertTextDoesntExist(${1:text}, '${2:message}')"},
        {"trigger": "test.assertTextExists", "contents": "test.assertTextExists(${1:text}, '${2:message}')"},
        {"trigger": "test.assertTruthy", "contents": "test.assertTruthy(${1:subject}, '${2:message}')"},
        {"trigger": "test.assertFalsy", "contents": "test.assertFalsy(${1:subject}, '${2:message}')"},
        {"trigger": "test.assertSelectorHasText", "contents": "test.assertSelectorHasText('${1:.selector}', '${2:text}', '${3:message}')"},
        {"trigger": "test.assertSelectorDoesntHaveText", "contents": "test.assertSelectorDoesntHaveText('${1:.selector}', '${2:text}', '${3:message}')"},
        {"trigger": "test.assertTitle", "contents": "test.assertTitle(${1:expected}, '${2:message}')"},
        {"trigger": "test.assertTitleMatch", "contents": "test.assertTitleMatch(${1:pattern}, '${2:message}')"},
        {"trigger": "test.assertType", "contents": "test.assertType(${1:subject}, '${2:type}', '${3:message}')"},
        {"trigger": "test.assertUrlMatch", "contents": "test.assertUrlMatch(${1:pattern}, '${2:message}')"},
        {"trigger": "test.assertVisible", "contents": "test.assertVisible('${1:.selector}', '${2:message}')"},
        {"trigger": "test.comment", "contents": "test.comment('${1:message}')"},
        {"trigger": "test.done", "contents": "test.done()"},
        {"trigger": "test.fail", "contents": "test.fail('${1:message}')"},
        {"trigger": "test.info", "contents": "test.info('${1:message}')"},
        {"trigger": "test.pass", "contents": "test.pass('${1:message}')"},

        /* utils module*/
        {"trigger": "utils.betterTypeOf", "contents": "utils.betterTypeOf(${1:input})"},
        {"trigger": "utils.betterInstanceOf", "contents": "utils.betterInstanceOf(${1:input}, ${2:constructor})"},
        {"trigger": "utils.cleanUrl", "contents": "utils.cleanUrl(${1:url})"},
        {"trigger": "utils.clone", "contents": "utils.clone(${1:o})"},
        {"trigger": "utils.dump", "contents": "utils.dump(${1:value})"},
        {"trigger": "utils.equals", "contents": "utils.equals(${1:v1}, ${2:v2})"},
        {"trigger": "utils.fileExt", "contents": "utils.fileExt(${1:file})"},
        {"trigger": "utils.fillBlanks", "contents": "utils.fillBlanks(${1:text}, ${2:pad})"},
        {"trigger": "utils.format", "contents": "utils.format(${1:f})"},
        {"trigger": "utils.getPropertyPath", "contents": "utils.getPropertyPath(${1:obj}, ${2:path})"},
        {"trigger": "utils.inherits", "contents": "utils.inherits(${1:ctor}, ${2:superCtor})"},
        {"trigger": "utils.isArray", "contents": "utils.isArray(${1:value})"},
        {"trigger": "utils.isCasperObject", "contents": "utils.isCasperObject(${1:value})"},
        {"trigger": "utils.isClipRect", "contents": "utils.isClipRect(${1:value})"},
        {"trigger": "utils.isFalsy", "contents": "utils.isFalsy(${1:subject})"},
        {"trigger": "utils.isFunction", "contents": "utils.isFunction(${1:value})"},
        {"trigger": "utils.isHTTPResource", "contents": "utils.isHTTPResource(${1:resource})"},
        {"trigger": "utils.isJsFile", "contents": "utils.isJsFile(${1:file})"},
        {"trigger": "utils.isNull", "contents": "utils.isNull(${1:value})"},
        {"trigger": "utils.isNumber", "contents": "utils.isNumber(${1:value})"},
        {"trigger": "utils.isObject", "contents": "utils.isObject(${1:value})"},
        {"trigger": "utils.isString", "contents": "utils.isString(${1:value})"},
        {"trigger": "utils.isTruthy", "contents": "utils.isTruthy(${1:subject})"},
        {"trigger": "utils.isType", "contents": "utils.isType(${1:what}, ${2:typeName})"},
        {"trigger": "utils.isUndefined", "contents": "utils.isUndefined(${1:value})"},
        {"trigger": "utils.isValidSelector", "contents": "utils.isValidSelector(${1:value})"},
        {"trigger": "utils.isWebPage", "contents": "utils.isWebPage(${1:what})"},
        {"trigger": "utils.mergeObjects", "contents": "utils.mergeObjects(${1:origin}, ${2:add})"},
        {"trigger": "utils.ms2seconds", "contents": "utils.ms2seconds(${1:milliseconds})"},
        {"trigger": "utils.node", "contents": "utils.node(${1:name}, ${2:attributes})"},
        {"trigger": "utils.objectValues", "contents": "utils.objectValues(${1:obj})"},
        {"trigger": "utils.serialize", "contents": "utils.serialize(${1:value}, ${2:indent})"},
        {"trigger": "utils.unique", "contents": "utils.unique(${1:array})"},
        {"trigger": "utils.cmpVersion", "contents": "utils.cmpVersion(${1:a}, ${2:b})"},
        {"trigger": "utils.versionToString", "contents": "utils.versionToString(${1:version})"},
        {"trigger": "utils.gteVersion", "contents": "utils.gteVersion(${1:a}, ${2:b})"},
        {"trigger": "utils.ltVersion", "contents": "utils.ltVersion(${1:a}, ${2:b})"},

        /* Hudl extensions */
        {"trigger": "doesntExist", "contents": "doesntExist();"},
        {"trigger": "exists", "contents": "exists();"},
        {"trigger": "notVisible", "contents": "notVisible();"},
        {"trigger": "doesntHaveText", "contents": "doesntHaveText('${1:text}');"},
        {"trigger": "hasText", "contents": "hasText('${1:value}');"},
        {"trigger": "visible", "contents": "visible();"},
        {"trigger": "hasAttribute", "contents": "hasAttribute('${1:attribute}', '${2:value}');"},
        {"trigger": "doesntHaveAttribute", "contents": "doesntHaveAttribute('${1:attribute}', '${2:value}');"},

        {"trigger": "waitForSelector", "contents": "waitForSelector(function() {\n\t${1: //Pass}\n}, function() {\n\t${2: //Fail}\n}${3:, ${4:Timeout (10000)}});"},
        {"trigger": "waitForText", "contents": "waitForText(function() {\n\t${1: //Pass}\n}, function() {\n\t${2: //Fail}\n}${3:, ${4:Timeout (10000)}});"},
        {"trigger": "waitWhileSelector", "contents": "waitWhileSelector(function() {\n\t${1: //Pass}\n}, function() {\n\t${2: //Fail}\n}${3:, ${4:Timeout (10000)}});"},
        {"trigger": "waitUntilVisible", "contents": "waitUntilVisible(function() {\n\t${1: //Pass}\n}, function() {\n\t${2: //Fail}\n}${3:, ${4:Timeout (10000)}});"},
        {"trigger": "waitWhileVisible", "contents": "waitWhileVisible(function() {\n\t${1: //Pass}\n}, function() {\n\t${2: //Fail}\n}${3:, ${4:Timeout (10000)}});"},

        {"trigger": "click", "contents": "click();"},
        {"trigger": "thenClick", "contents": "thenClick();"},
        {"trigger": "doubleClick", "contents": "doubleClick();"},
        {"trigger": "hover", "contents": "hover();"},
        {"trigger": "drag", "contents": "drag(${1});"},

        {"trigger": "getSelected", "contents": "getSelected()"},
        {"trigger": "setSelected", "contents": "setSelected('${1:value}');"},

        {"trigger": "sendKeys", "contents": "sendKeys('${1:string}');"},
        {"trigger": "sendKeysOptions", "contents": "setSelected('${1:value}', {${2:options}});"},
    ]
}
